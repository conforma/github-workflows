# Copyright The Enterprise Contract Contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

---
name: 'Set auto merge'
'on':
  workflow_call:

jobs:
  set-auto-merge:
    runs-on: ubuntu-latest
    if: ${{ github.event.review.state == 'APPROVED' && (github.event.pull_request.user.login == 'dependabot[bot]' || github.event.pull_request.user.login == 'renovate[bot]') }}
    steps:
      - run: |
          echo 'Setting auto merge for approved pull requests created by Dependabot and approved by a collaborator'
          set -o errexit
          set -o nounset
          set -o pipefail

          FULL_NAME='${{ github.event.repository.full_name }}'
          ORG="${FULL_NAME%/*}"
          REPO="${FULL_NAME#*/}"
          if [ "$(gh api graphql -f query="{repository(owner: \"${ORG}\", name: \"${REPO}\") { collaborators { nodes { login } } } }" --jq '.data.repository.collaborators.nodes.[].login | select (. == "${{ github.event.sender.login }}")')" == "${{ github.event.sender.login }}" ]; then
            gh pr merge ${{ github.event.pull_request.number }} --merge --auto --delete-branch
          else
            echo "::notice::Pull request not approved by a collaborator"
          fi
        env:
          GH_REPO: ${{ github.event.repository.full_name }}
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
